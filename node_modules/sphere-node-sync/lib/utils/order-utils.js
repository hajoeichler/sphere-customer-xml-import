var OrderUtils, Utils, actionsList, actionsListReturnInfoState, helper, jsondiffpatch, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

jsondiffpatch = require('jsondiffpatch');

Utils = require('./utils');

helper = require('../helper');


/*
Order Utils class
 */

OrderUtils = (function(_super) {
  __extends(OrderUtils, _super);

  function OrderUtils() {
    return OrderUtils.__super__.constructor.apply(this, arguments);
  }


  /*
  Create list of actions for syncing order status values.
  @param {object} diff Result of jsondiffpatch tool.
  @param {object} old_obj Order to be updated.
  @return list with actions
   */

  OrderUtils.prototype.actionsMapStatusValues = function(diff, old_obj) {
    var actions;
    actions = [];
    _.each(actionsList(), function(item) {
      var action, key, obj, updated;
      key = item.key;
      obj = diff[key];
      if (obj) {
        updated = helper.getDeltaValue(obj);
        action = {
          action: item.action
        };
        action[key] = updated;
      }
      if (action) {
        return actions.push(action);
      }
    });
    return actions;
  };


  /*
  Create list of actions for syncing delivery items.
  @param {object} diff Result of jsondiffpatch tool.
  @param {object} old_obj Order to be updated.
  @return list with actions
   */

  OrderUtils.prototype.actionsMapDeliveries = function(diff, old_obj) {
    var actions;
    if (!(_.has(diff, 'shippingInfo') && _.has(diff.shippingInfo, 'deliveries'))) {
      return [];
    }
    actions = _.chain(diff.shippingInfo.deliveries).filter(function(item, key) {
      return key !== '_t';
    }).map(function(deliveryDiff, deliveryIndex) {
      var action, delivery;
      if (_.isArray(deliveryDiff)) {
        delivery = _.last(deliveryDiff);
        action = {
          action: 'addDelivery'
        };
        _.each(_.keys(delivery), function(key) {
          return action[key] = delivery[key];
        });
        return action;
      } else {
        return _.chain(deliveryDiff.parcels).filter(function(item, key) {
          return key !== '_t' && _.isArray(item);
        }).map(function(parcelDiff) {
          var parcel;
          parcel = _.last(parcelDiff);
          action = {
            action: 'addParcelToDelivery',
            deliveryId: old_obj.shippingInfo.deliveries[deliveryIndex].id
          };
          _.each(parcel, function(item, key) {
            return action[key] = item;
          });
          return action;
        }).value();
      }
    }).value();
    return _.flatten(actions);
  };


  /*
  Create list of actions for syncing returnInfo items and returnInfo status values.
  @param {object} diff Result of jsondiffpatch tool.
  @param {object} old_obj Order to be updated.
  @return list with actions
   */

  OrderUtils.prototype.actionsMapReturnInfo = function(diff, old_obj) {
    var actions;
    if (!_.has(diff, 'returnInfo')) {
      return [];
    }
    actions = _.chain(diff['returnInfo']).filter(function(item, key) {
      return key !== '_t';
    }).map(function(returnInfoDelta, returnInfoDeltaKey) {
      var action, returnInfo;
      if (_.isArray(returnInfoDelta)) {
        returnInfo = _.last(returnInfoDelta);
        action = {
          action: 'addReturnInfo'
        };
        _.each(returnInfo, function(value, key) {
          return action[key] = value;
        });
        return action;
      } else {
        returnInfo = returnInfoDelta;
        return actions = _.chain(returnInfo.items).filter(function(item, key) {
          return key !== '_t';
        }).map(function(item, itemKey) {
          return _.chain(actionsListReturnInfoState()).filter(function(actionDefinition) {
            return _.has(item, actionDefinition.key);
          }).map(function(actionDefinition) {
            action = {
              action: actionDefinition.action,
              returnItemId: old_obj.returnInfo[returnInfoDeltaKey].items[itemKey].id
            };
            action[actionDefinition.key] = helper.getDeltaValue(item[actionDefinition.key]);
            return action;
          }).value();
        }).value();
      }
    }).value();
    return _.flatten(actions);
  };

  return OrderUtils;

})(Utils);


/*
Exports object
 */

module.exports = OrderUtils;

actionsList = function() {
  return [
    {
      action: 'changeOrderState',
      key: 'orderState'
    }, {
      action: 'changePaymentState',
      key: 'paymentState'
    }, {
      action: 'changeShipmentState',
      key: 'shipmentState'
    }
  ];
};

actionsListReturnInfoState = function() {
  return [
    {
      action: 'setReturnShipmentState',
      key: 'shipmentState'
    }, {
      action: 'setReturnPaymentState',
      key: 'paymentState'
    }
  ];
};
