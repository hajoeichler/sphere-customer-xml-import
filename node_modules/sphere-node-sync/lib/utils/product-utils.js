var ProductUtils, REGEX_NUMBER, REGEX_UNDERSCORE_NUMBER, Utils, actionsBaseList, buildAddExternalImageAction, buildAddPriceAction, buildBaseAttributesAction, buildChangePriceAction, buildNewSetAttributeAction, buildRemoveImageAction, buildRemovePriceAction, buildSetAttributeAction, buildSkuActions, buildVariantAttributesActions, buildVariantImagesAction, getVariantId, helper, jsondiffpatch, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

_.mixin(require('sphere-node-utils')._u);

jsondiffpatch = require('jsondiffpatch');

Utils = require('./utils');

helper = require('../helper');

REGEX_NUMBER = new RegExp(/^\d+$/);

REGEX_UNDERSCORE_NUMBER = new RegExp(/^\_\d+$/);


/*
Product Utils class
 */

ProductUtils = (function(_super) {
  var allVariants;

  __extends(ProductUtils, _super);

  function ProductUtils() {
    return ProductUtils.__super__.constructor.apply(this, arguments);
  }

  allVariants = function(product) {
    var masterVariant, variants, _ref;
    _ref = _.defaults(product, {
      masterVariant: {},
      variants: []
    }), masterVariant = _ref.masterVariant, variants = _ref.variants;
    return [masterVariant].concat(variants);
  };

  ProductUtils.prototype.diff = function(old_obj, new_obj) {
    var isEnum, patch, patchEnums, patchPrices, patchVariantId;
    patchPrices = function(variant) {
      if (variant.prices) {
        return _.each(variant.prices, function(price, index) {
          return price._MATCH_CRITERIA = index;
        });
      }
    };
    patchVariantId = function(variant, index) {
      variant._MATCH_CRITERIA = variant.id;
      if (variant.sku != null) {
        variant._MATCH_CRITERIA = variant.sku;
      }
      if (variant._MATCH_CRITERIA == null) {
        throw new Error('A variant must either have an ID or an SKU.');
      }
    };
    isEnum = function(value) {
      return _.has(value, 'key') && _.has(value, 'label');
    };
    patchEnums = function(variant) {
      if (variant.attributes) {
        return _.each(variant.attributes, function(attribute) {
          var index, v, val, _i, _len, _ref;
          if (attribute.value != null) {
            if (isEnum(attribute.value)) {
              v = attribute.value.key;
              delete attribute.value;
              return attribute.value = v;
            } else if (_.isArray(attribute.value)) {
              _ref = attribute.value;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                val = _ref[index];
                if (isEnum(val)) {
                  attribute.value[index] = val.key;
                } else {
                  return;
                }
              }
            }
          }
        });
      }
    };
    patch = function(obj, arrayIndexFieldName) {
      return _.each(allVariants(obj), function(variant, index) {
        patchPrices(variant);
        patchEnums(variant);
        patchVariantId(variant, index);
        if (index > 0) {
          return variant[arrayIndexFieldName] = index - 1;
        }
      });
    };
    patch(old_obj, '_EXISTING_ARRAY_INDEX');
    patch(new_obj, '_NEW_ARRAY_INDEX');
    return ProductUtils.__super__.diff.call(this, old_obj, new_obj);
  };


  /*
   * Actions mapping
   */

  ProductUtils.prototype.actionsMapBase = function(diff, old_obj) {
    var actions, list;
    list = _.filter(actionsBaseList(), function(a) {
      switch (a.key) {
        case 'name':
        case 'slug':
        case 'description':
          return true;
        default:
          return false;
      }
    });
    actions = [];
    _.each(list, function(item) {
      var action;
      action = buildBaseAttributesAction(item, diff, old_obj);
      if (action) {
        return actions.push(action);
      }
    });
    return actions;
  };

  ProductUtils.prototype.actionsMapMetaAttributes = function(diff, old_obj) {
    var actions, defaults, list, reduced;
    list = _.filter(actionsBaseList(), function(a) {
      switch (a.key) {
        case 'metaTitle':
        case 'metaDescription':
        case 'metaKeywords':
          return true;
        default:
          return false;
      }
    });
    actions = [];
    _.each(list, function(item) {
      var action;
      action = buildBaseAttributesAction(item, diff, old_obj);
      if (action) {
        return actions.push(action);
      }
    });
    if (_.isEmpty(actions)) {
      return [];
    }
    reduced = _.reduce(actions, function(memo, action) {
      return _.extend({}, memo, action);
    }, {
      action: 'setMetaAttributes'
    });
    defaults = _.pick(old_obj, 'metaTitle', 'metaDescription', 'metaKeywords');
    return [_.defaults(reduced, defaults)];
  };

  ProductUtils.prototype.actionsMapVariants = function(diff, old_obj, new_obj) {
    var actions;
    actions = [];
    if (diff.variants) {
      _.each(diff.variants, function(variant, key) {
        var action, newVariant;
        if (REGEX_NUMBER.test(key) && _.isArray(variant)) {
          newVariant = new_obj.variants[key];
          action = {
            action: 'addVariant'
          };
          if (newVariant.sku) {
            action.sku = newVariant.sku;
          }
          if (newVariant.prices) {
            action.prices = newVariant.prices;
          }
          if (newVariant.attributes) {
            action.attributes = newVariant.attributes;
          }
          return actions.push(action);
        } else if (REGEX_UNDERSCORE_NUMBER.test(key) && _.isArray(variant)) {
          if (_.size(variant) === 3 && variant[2] === 3) {

          } else {
            action = {
              action: 'removeVariant',
              id: getVariantId(variant[0])
            };
            return actions.push(action);
          }
        }
      });
    }
    return _.sortBy(actions, function(a) {
      return a.action === 'addVariant';
    });
  };

  ProductUtils.prototype.actionsMapReferences = function(diff, old_obj, new_obj) {
    var action, actions;
    actions = [];
    if (diff.taxCategory) {
      if (_.isArray(diff.taxCategory)) {
        action = {
          action: 'setTaxCategory'
        };
        action.taxCategory = helper.getDeltaValue(diff.taxCategory);
        actions.push(action);
      } else {
        action = {
          action: 'setTaxCategory',
          taxCategory: new_obj.taxCategory
        };
        actions.push(action);
      }
    }
    if (diff.categories) {
      _.each(diff.categories, function(category) {
        if (_.isArray(category)) {
          action = {
            category: category[0]
          };
          if (_.size(category) === 3) {
            if (category[2] !== 3) {
              action.action = 'removeFromCategory';
            }
          } else if (_.size(category) === 1) {
            action.action = 'addToCategory';
          }
          if (action.action != null) {
            return actions.push(action);
          }
        }
      });
    }
    return _.sortBy(actions, function(a) {
      return a.action === 'addToCategory';
    });
  };

  ProductUtils.prototype.actionsMapPrices = function(diff, old_obj, new_obj) {
    var actions, prices;
    actions = [];
    if (diff.masterVariant) {
      prices = diff.masterVariant.prices;
      if (prices) {
        _.each(prices, function(value, key) {
          var addAction, changeAction, index, removeAction;
          if (REGEX_NUMBER.test(key)) {
            index = key;
          } else if (REGEX_UNDERSCORE_NUMBER.test(key)) {
            index = key.substring(1);
          }
          if (index) {
            if (_.size(value) === 1 && _.size(value.value) === 1 && _.has(value.value, 'centAmount')) {
              changeAction = buildChangePriceAction(value.value.centAmount, old_obj.masterVariant, index);
              if (changeAction) {
                return actions.push(changeAction);
              }
            } else {
              removeAction = buildRemovePriceAction(old_obj.masterVariant, index);
              if (removeAction) {
                actions.push(removeAction);
              }
              addAction = buildAddPriceAction(new_obj.masterVariant, index);
              if (addAction) {
                return actions.push(addAction);
              }
            }
          }
        });
      }
    }
    if (diff.variants) {
      _.each(diff.variants, function(variant, key) {
        var index_new, index_old;
        if (REGEX_NUMBER.test(key)) {
          if (!_.isArray(variant)) {
            index_old = variant._EXISTING_ARRAY_INDEX[0];
            index_new = variant._NEW_ARRAY_INDEX[0];
            if (!_.isArray(variant)) {
              prices = variant.prices;
              if (prices) {
                return _.each(prices, function(value, key) {
                  var addAction, changeAction, index, removeAction;
                  if (REGEX_NUMBER.test(key)) {
                    index = key;
                  } else if (REGEX_UNDERSCORE_NUMBER.test(key)) {
                    index = key.substring(1);
                  }
                  if (index) {
                    if (_.size(value) === 1 && _.size(value.value) === 1 && _.has(value.value, 'centAmount')) {
                      changeAction = buildChangePriceAction(value.value.centAmount, old_obj.variants[index_old], index);
                      if (changeAction) {
                        return actions.push(changeAction);
                      }
                    } else {
                      removeAction = buildRemovePriceAction(old_obj.variants[index_old], index);
                      if (removeAction) {
                        actions.push(removeAction);
                      }
                      addAction = buildAddPriceAction(new_obj.variants[index_new], index);
                      if (addAction) {
                        return actions.push(addAction);
                      }
                    }
                  }
                });
              }
            }
          }
        }
      });
    }
    return _.sortBy(actions, function(a) {
      return a.action === 'addPrice';
    });
  };

  ProductUtils.prototype.actionsMapAttributes = function(diff, old_obj, new_obj, sameForAllAttributeNames) {
    var actions, attrActions, attributes, masterVariant, skuAction;
    if (sameForAllAttributeNames == null) {
      sameForAllAttributeNames = [];
    }
    actions = [];
    masterVariant = diff.masterVariant;
    if (masterVariant) {
      skuAction = buildSkuActions(masterVariant, old_obj.masterVariant);
      if (skuAction != null) {
        actions.push(skuAction);
      }
      attributes = masterVariant.attributes;
      attrActions = buildVariantAttributesActions(attributes, old_obj.masterVariant, new_obj.masterVariant, sameForAllAttributeNames);
      actions = actions.concat(attrActions);
    }
    if (diff.variants) {
      _.each(diff.variants, function(variant, key) {
        var index_new, index_old;
        if (REGEX_NUMBER.test(key)) {
          if (!_.isArray(variant)) {
            index_old = variant._EXISTING_ARRAY_INDEX[0];
            index_new = variant._NEW_ARRAY_INDEX[0];
            skuAction = buildSkuActions(variant, old_obj.variants[index_old]);
            if (skuAction != null) {
              actions.push(skuAction);
            }
            attributes = variant.attributes;
            attrActions = buildVariantAttributesActions(attributes, old_obj.variants[index_old], new_obj.variants[index_new], sameForAllAttributeNames);
            return actions = actions.concat(attrActions);
          }
        }
      });
    }
    return _.unique(actions, function(action) {
      return JSON.stringify(action);
    });
  };

  ProductUtils.prototype.actionsMapImages = function(diff, old_obj, new_obj) {
    var actions, mActions, masterVariant;
    actions = [];
    masterVariant = diff.masterVariant;
    if (masterVariant) {
      mActions = buildVariantImagesAction(masterVariant.images, old_obj.masterVariant, new_obj.masterVariant);
      actions = actions.concat(mActions);
    }
    if (diff.variants) {
      _.each(diff.variants, function(variant, key) {
        var index_new, index_old, vActions;
        if (REGEX_NUMBER.test(key)) {
          if (!_.isArray(variant)) {
            index_old = variant._EXISTING_ARRAY_INDEX[0];
            index_new = variant._NEW_ARRAY_INDEX[0];
            if (!_.isArray(variant)) {
              vActions = buildVariantImagesAction(variant.images, old_obj.variants[index_old], new_obj.variants[index_new]);
              return actions = actions.concat(vActions);
            }
          }
        }
      });
    }
    return _.sortBy(actions, function(a) {
      return a.action === 'addExternalImage';
    });
  };

  return ProductUtils;

})(Utils);


/*
Exports object
 */

module.exports = ProductUtils;

actionsBaseList = function() {
  return [
    {
      action: 'changeName',
      key: 'name'
    }, {
      action: 'changeSlug',
      key: 'slug'
    }, {
      action: 'setDescription',
      key: 'description'
    }, {
      action: 'setMetaAttributes',
      key: 'metaTitle'
    }, {
      action: 'setMetaAttributes',
      key: 'metaDescription'
    }, {
      action: 'setMetaAttributes',
      key: 'metaKeywords'
    }
  ];
};

buildBaseAttributesAction = function(item, diff, old_obj) {
  var action, key, keys, obj, old, updated;
  key = item.key;
  obj = diff[key];
  if (obj) {
    updated = {};
    if (_.isArray(obj)) {
      updated = helper.getDeltaValue(obj);
    } else {
      keys = _.keys(obj);
      _.each(keys, function(k) {
        var value;
        value = helper.getDeltaValue(obj[k]);
        return updated[k] = value;
      });
    }
    if (old_obj[key]) {
      old = _.deepClone(old_obj[key]);
      _.extend(old, updated);
    } else {
      old = updated;
    }
    action = {
      action: item.action
    };
    if (updated) {
      action[key] = old;
    } else {
      action[key] = void 0;
    }
  }
  return action;
};

buildChangePriceAction = function(centAmountDiff, variant, index) {
  var action, price;
  price = variant.prices[index];
  if (price) {
    delete price._MATCH_CRITERIA;
    price.value.centAmount = helper.getDeltaValue(centAmountDiff);
    action = {
      action: 'changePrice',
      variantId: getVariantId(variant),
      price: price
    };
  }
  return action;
};

buildRemovePriceAction = function(variant, index) {
  var action, price;
  price = variant.prices[index];
  if (price) {
    delete price._MATCH_CRITERIA;
    action = {
      action: 'removePrice',
      variantId: getVariantId(variant),
      price: price
    };
  }
  return action;
};

buildAddPriceAction = function(variant, index) {
  var action, price;
  price = variant.prices[index];
  if (price) {
    delete price._MATCH_CRITERIA;
    action = {
      action: 'addPrice',
      variantId: getVariantId(variant),
      price: price
    };
  }
  return action;
};

buildVariantImagesAction = function(images, old_variant, new_variant) {
  var actions;
  actions = [];
  _.each(images, function(img, key) {
    var action, index;
    if (REGEX_NUMBER.test(key)) {
      if (!_.isEmpty(old_variant.images)) {
        action = buildRemoveImageAction(old_variant, old_variant.images[key]);
        if (action) {
          actions.push(action);
        }
      }
      if (!_.isEmpty(new_variant.images)) {
        action = buildAddExternalImageAction(old_variant, new_variant.images[key]);
        if (action) {
          return actions.push(action);
        }
      }
    } else if (REGEX_UNDERSCORE_NUMBER.test(key)) {
      index = key.substring(1);
      if (!_.isEmpty(old_variant.images)) {
        action = buildRemoveImageAction(old_variant, old_variant.images[index]);
        if (action) {
          return actions.push(action);
        }
      }
    }
  });
  return actions;
};

buildAddExternalImageAction = function(variant, image) {
  var action;
  if (image) {
    action = {
      action: 'addExternalImage',
      variantId: getVariantId(variant),
      image: image
    };
  }
  return action;
};

buildRemoveImageAction = function(variant, image) {
  var action;
  if (image) {
    action = {
      action: 'removeImage',
      variantId: getVariantId(variant),
      imageUrl: image.url
    };
  }
  return action;
};

buildSetAttributeAction = function(diffed_value, old_variant, attribute, sameForAllAttributeNames) {
  var action, centAmount, currencyCode, text;
  if (!attribute) {
    return;
  }
  if (attribute) {
    action = {
      action: 'setAttribute',
      variantId: getVariantId(old_variant),
      name: attribute.name
    };
    if (_.contains(sameForAllAttributeNames, attribute.name)) {
      action.action = 'setAttributeInAllVariants';
      delete action.variantId;
    }
    if (_.isArray(diffed_value)) {
      action.value = helper.getDeltaValue(diffed_value);
    } else {
      if (_.isString(diffed_value)) {
        action.value = helper.getDeltaValue(diffed_value);
      } else if (diffed_value.centAmount) {
        if (diffed_value.centAmount) {
          centAmount = helper.getDeltaValue(diffed_value.centAmount);
        } else {
          centAmount = attribute.value.centAmount;
        }
        if (diffed_value.currencyCode) {
          currencyCode = helper.getDeltaValue(diffed_value.currencyCode);
        } else {
          currencyCode = attribute.value.currencyCode;
        }
        action.value = {
          centAmount: centAmount,
          currencyCode: currencyCode
        };
      } else if (_.isObject(diffed_value)) {
        if (_.has(diffed_value, '_t') && diffed_value['_t'] === 'a') {
          action.value = attribute.value;
        } else {
          text = {};
          _.each(diffed_value, function(v, k) {
            return text[k] = helper.getDeltaValue(v);
          });
          action.value = text;
        }
      }
    }
  }
  return action;
};

buildNewSetAttributeAction = function(id, el, sameForAllAttributeNames) {
  var action, attributeName;
  attributeName = el.name;
  if (!attributeName) {
    return;
  }
  action = {
    action: "setAttribute",
    variantId: id,
    name: attributeName,
    value: el.value
  };
  if (_.contains(sameForAllAttributeNames, attributeName)) {
    action.action = 'setAttributeInAllVariants';
    delete action.variantId;
  }
  return action;
};

buildVariantAttributesActions = function(attributes, old_variant, new_variant, sameForAllAttributeNames) {
  var actions;
  actions = [];
  if (attributes) {
    _.each(attributes, function(value, key) {
      var id, index, setAction, v;
      if (REGEX_NUMBER.test(key)) {
        if (_.isArray(value)) {
          v = helper.getDeltaValue(value);
          id = getVariantId(old_variant);
          setAction = buildNewSetAttributeAction(id, v, sameForAllAttributeNames);
          if (setAction) {
            return actions.push(setAction);
          }
        } else {
          index = key;
          setAction = buildSetAttributeAction(value.value, old_variant, new_variant.attributes[index], sameForAllAttributeNames);
          if (setAction) {
            return actions.push(setAction);
          }
        }
      } else if (REGEX_UNDERSCORE_NUMBER.test(key)) {
        if (_.isArray(value)) {
          if (_.size(value) === 3 && value[2] === 3) {
            return;
          }
          v = helper.getDeltaValue(value);
          if (!v) {
            v = value[0];
            delete v.value;
          }
          id = getVariantId(old_variant);
          setAction = buildNewSetAttributeAction(id, v, sameForAllAttributeNames);
          if (setAction) {
            return actions.push(setAction);
          }
        } else {
          index = key.substring(1);
          setAction = buildSetAttributeAction(value.value, old_variant, new_variant.attributes[index], sameForAllAttributeNames);
          if (setAction) {
            return actions.push(setAction);
          }
        }
      }
    });
  }
  return actions;
};

buildSkuActions = function(variantDiff, old_variant) {
  var action;
  if (_.has(variantDiff, 'sku')) {
    return action = {
      action: 'setSKU',
      variantId: getVariantId(old_variant),
      sku: helper.getDeltaValue(variantDiff.sku)
    };
  }
};

getVariantId = function(variant) {
  return variant.id;
};
