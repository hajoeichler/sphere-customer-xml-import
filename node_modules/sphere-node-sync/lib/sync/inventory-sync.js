var InventorySync, InventoryUtils, Sync, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

Sync = require('../sync/sync');

InventoryUtils = require('../utils/inventory-utils');


/*
Inventory Sync class.
  Ensures that quantityOnStock and expectedDelivery is in sync.
 */

InventorySync = (function(_super) {
  __extends(InventorySync, _super);

  function InventorySync(opts) {
    if (opts == null) {
      opts = {};
    }
    InventorySync.__super__.constructor.call(this, opts);
    this._utils = new InventoryUtils;
  }

  InventorySync.prototype._doMapActions = function(diff, new_obj, old_obj) {
    var allActions;
    allActions = [];
    allActions.push(this._mapActionOrNot('quantity', (function(_this) {
      return function() {
        return _this._utils.actionsMapQuantity(diff, old_obj);
      };
    })(this)));
    allActions.push(this._mapActionOrNot('expectedDelivery', (function(_this) {
      return function() {
        return _this._utils.actionsMapExpectedDelivery(diff, old_obj);
      };
    })(this)));
    return _.flatten(allActions);
  };

  InventorySync.prototype._doUpdate = function() {
    return this._client.inventoryEntries.byId(this._data.updateId).update(this._data.update);
  };

  return InventorySync;

})(Sync);


/*
Exports object
 */

module.exports = InventorySync;
