/* ===========================================================
# sphere-node-connect - v0.5.6
# ==============================================================
# Copyright (c) 2013 Nicola Molinari
# Licensed under the MIT license.
*/
var Logger, OAuth2, request, _;

_ = require('underscore');

_.mixin(require('sphere-node-utils')._u);

request = require('request');

Logger = require('./logger');


/**
 * Creates a new OAuth2 instance, used to connect to https://auth.sphere.io
 * @class OAuth2
 */

OAuth2 = (function() {

  /**
   * Initialize the class
   * @constructor
   * @param {Object} [opts] A JSON object containg configuration options
   * @throws {Error} if credentials are missing
   */
  function OAuth2(opts) {
    var config, rejectUnauthorized;
    if (opts == null) {
      opts = {};
    }
    config = opts.config;
    if (!config) {
      throw new Error('Missing credentials');
    }
    if (!config.client_id) {
      throw new Error('Missing \'client_id\'');
    }
    if (!config.client_secret) {
      throw new Error('Missing \'client_secret\'');
    }
    if (!config.project_key) {
      throw new Error('Missing \'project_key\'');
    }
    this.logger = new Logger(opts.logConfig);
    rejectUnauthorized = _.isUndefined(opts.rejectUnauthorized) ? true : opts.rejectUnauthorized;
    this._options = {
      config: config,
      host: opts.host || 'auth.sphere.io',
      accessTokenUrl: opts.accessTokenUrl || '/oauth/token',
      timeout: opts.timeout || 20000,
      rejectUnauthorized: rejectUnauthorized
    };
    this.logger.debug(this._options, 'New OAuth object');
    return;
  }


  /**
   * Retrieve an `access_token` to be able to access the HTTP API
   * @param {Function} callback A function fulfilled with `error, response, body` arguments.
   */

  OAuth2.prototype.getAccessToken = function(callback) {
    var params, payload, request_options;
    params = {
      grant_type: 'client_credentials',
      scope: "manage_project:" + this._options.config.project_key
    };
    payload = _.stringifyQuery(params);
    request_options = {
      uri: "https://" + this._options.config.client_id + ":" + this._options.config.client_secret + "@" + this._options.host + this._options.accessTokenUrl,
      json: true,
      method: 'POST',
      body: payload,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': payload.length
      },
      timeout: this._options.timeout,
      rejectUnauthorized: this._options.rejectUnauthorized
    };
    this.logger.debug(request_options, 'Retrieving access_token...');
    return this._doRequest(request_options, callback);
  };


  /**
   * Execute the request using the underling `request` module
   * @link https://github.com/mikeal/request
   * @param {Object} options A JSON object containing all required options for the request
   * @param {Function} callback A function fulfilled with `error, response, body` arguments.
   */

  OAuth2.prototype._doRequest = function(options, callback) {
    return request(options, (function(_this) {
      return function(e, r, b) {
        if (e) {
          _this.logger.error(e);
        }
        _this.logger.debug({
          request: r != null ? r.request : void 0,
          response: r
        }, 'OAuth response');
        return callback(e, r, b);
      };
    })(this));
  };

  return OAuth2;

})();


/*
Exports object
 */

module.exports = OAuth2;
