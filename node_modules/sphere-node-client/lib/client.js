/* ===========================================================
# sphere-node-client - v0.7.2
# ==============================================================
# Copyright (c) 2014 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-client/blob/master/LICENSE-MIT
*/
var CartService, CategoryService, ChannelService, CommentService, CustomObjectService, CustomerGroupService, CustomerService, InventoryEntryService, Logger, MessageService, OrderService, ProductProjectionService, ProductService, ProductTypeService, Rest, ReviewService, ShippingMethodService, SphereClient, StateService, TaskQueue, TaxCategoryService, ZoneService, _;

_ = require('underscore');

Rest = require('sphere-node-connect').Rest;

TaskQueue = require('sphere-node-utils').TaskQueue;

Logger = require('./logger');

CartService = require('./services/carts');

CategoryService = require('./services/categories');

ChannelService = require('./services/channels');

CommentService = require('./services/comments');

CustomObjectService = require('./services/custom-objects');

CustomerService = require('./services/customers');

CustomerGroupService = require('./services/customer-groups');

InventoryEntryService = require('./services/inventory-entries');

MessageService = require('./services/messages');

OrderService = require('./services/orders');

ProductService = require('./services/products');

ProductProjectionService = require('./services/product-projections');

ProductTypeService = require('./services/product-types');

ReviewService = require('./services/reviews');

ShippingMethodService = require('./services/shipping-methods');

StateService = require('./services/states');

TaxCategoryService = require('./services/tax-categories');

ZoneService = require('./services/zones');


/**
 * Defines a SphereClient.
 * @class SphereClient
 */

SphereClient = (function() {

  /**
   * Constructs a new client with given API credentials
   * @constructor
   *
   * @param {Object} [options] An object containing the credentials for the `sphere-node-connect`
   * {@link https://github.com/sphereio/sphere-node-connect#documentation}
   */
  function SphereClient(options) {
    if (options == null) {
      options = {};
    }

    /**
     * @private
     * Instance of a Logger
     * @type {Logger}
     */
    this._logger = new Logger(options.logConfig);

    /**
     * @private
     * Instance of a TaskQueue
     * @type {TaskQueue}
     */
    this._task = options.task || new TaskQueue;

    /**
     * @private
     * Instance of the Rest client
     * @type {Rest}
     */
    this._rest = options.rest || new Rest(_.extend(options, {
      logConfig: {
        logger: this._logger
      }
    }));
    this.carts = new CartService(this._rest, this._logger, this._task);
    this.categories = new CategoryService(this._rest, this._logger, this._task);
    this.channels = new ChannelService(this._rest, this._logger, this._task);
    this.comments = new CommentService(this._rest, this._logger, this._task);
    this.customObjects = new CustomObjectService(this._rest, this._logger, this._task);
    this.customers = new CustomerService(this._rest, this._logger, this._task);
    this.customerGroups = new CustomerGroupService(this._rest, this._logger, this._task);
    this.inventoryEntries = new InventoryEntryService(this._rest, this._logger, this._task);
    this.messages = new MessageService(this._rest, this._logger, this._task);
    this.orders = new OrderService(this._rest, this._logger, this._task);
    this.products = new ProductService(this._rest, this._logger, this._task);
    this.productProjections = new ProductProjectionService(this._rest, this._logger, this._task);
    this.productTypes = new ProductTypeService(this._rest, this._logger, this._task);
    this.reviews = new ReviewService(this._rest, this._logger, this._task);
    this.shippingMethods = new ShippingMethodService(this._rest, this._logger, this._task);
    this.states = new StateService(this._rest, this._logger, this._task);
    this.taxCategories = new TaxCategoryService(this._rest, this._logger, this._task);
    this.zones = new ZoneService(this._rest, this._logger, this._task);
  }


  /**
   * Define max parallel request to be sent on each request from the {TaskQueue}
   * @param {Number} maxParallel A number between 1 and 100 (default is 20)
   */

  SphereClient.prototype.setMaxParallel = function(maxParallel) {
    return this._task.setMaxParallel(maxParallel);
  };

  return SphereClient;

})();


/**
 * The {@link SphereClient} client.
 */

module.exports = SphereClient;
