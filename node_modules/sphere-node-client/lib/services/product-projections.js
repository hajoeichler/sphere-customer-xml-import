var BaseService, ProductProjectionService, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

BaseService = require('./base');


/**
 * Creates a new ProductProjectionService.
 * @class ProductProjectionService
 */

ProductProjectionService = (function(_super) {
  __extends(ProductProjectionService, _super);

  function ProductProjectionService() {
    return ProductProjectionService.__super__.constructor.apply(this, arguments);
  }


  /**
   * @const
   * @private
   * Base path for a ProductProjections API resource endpoint
   * @type {String}
   */

  ProductProjectionService.baseResourceEndpoint = '/product-projections';


  /**
   * @private
   * Reset default query/search params
   */

  ProductProjectionService.prototype._setDefaults = function() {
    ProductProjectionService.__super__._setDefaults.call(this);
    return _.extend(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: [],
      filterByFacets: [],
      facet: []
    });
  };


  /**
   * Define whether to query for staged or current product projection.
   * @param Boolean [staged] true to query staged products (default). False to query published products
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.staged = function(staged) {
    if (staged == null) {
      staged = true;
    }
    this._params.query.staged = staged;
    this._logger.debug(this._params.query, 'Setting \'staged\' parameter');
    return this;
  };


  /**
   * Define the language tag used for searching product projection.
   * @param {String} language An ISO language tag, used for search, for the 'lang' search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.lang = function(language) {
    if (!language) {
      throw new Error('Language parameter is required for searching');
    }
    this._params.query.lang = language;
    this._logger.debug(this._params.query, 'Setting \'lang\' parameter');
    return this;
  };


  /**
   * Define the text to analyze and search.
   * @param {String} [text] A string for the `text` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.text = function(text) {
    if (!text) {
      return this;
    }
    this._params.query.text = text;
    this._logger.debug(this._params.query, 'Setting \'text\' parameter');
    return this;
  };


  /**
   * Define a {Filter} used for filtering searched product projections.
   * @link http://commercetools.de/dev/http-api-projects-products.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filter = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filter.push(encodedFilter);
    this._logger.debug(this._params.query, 'Setting \'filter\' parameter');
    return this;
  };


  /**
   * Define a {Filter} (applied to query result) used for filtering searched product projections.
   * @link http://commercetools.de/dev/http-api-projects-products.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter.query` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filterByQuery = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByQuery.push(encodedFilter);
    this._logger.debug(this._params.query, 'Setting \'filter.query\' parameter');
    return this;
  };


  /**
   * Define a {Filter} (applied to facet calculation) used for filtering searched product projections.
   * @link http://commercetools.de/dev/http-api-projects-products.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter.facets` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filterByFacets = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByFacets.push(encodedFilter);
    this._logger.debug(this._params.query, 'Setting \'filter.facets\' parameter');
    return this;
  };


  /**
   * Define a {Facet} used for calculating statistical counts for searched product projections.
   * @link http://commercetools.de/dev/http-api-projects-products.html#search-facets
   * @param {String} [facet] A {Facet} string for the `facet` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.facet = function(facet) {
    var encodedFacet;
    if (!facet) {
      return this;
    }
    encodedFacet = encodeURIComponent(facet);
    this._params.query.facet.push(encodedFacet);
    this._logger.debug(this._params.query, 'Setting \'facet\' parameter');
    return this;
  };


  /**
   * @private
   * Build a query string from (pre)defined params and custom search params.
   * @return {String} the query string
   */

  ProductProjectionService.prototype._queryString = function() {
    var customQueryString, facet, facetParam, filter, filterByFacets, filterByFacetsParam, filterByQuery, filterByQueryParam, filterParam, lang, staged, text, _ref;
    _ref = _.defaults(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: 'and',
      filterByFacets: [],
      facet: []
    }), staged = _ref.staged, lang = _ref.lang, text = _ref.text, filter = _ref.filter, filterByQuery = _ref.filterByQuery, filterByFacets = _ref.filterByFacets, facet = _ref.facet;
    filterParam = filter.join('&');
    filterByQueryParam = filterByQuery.join('&');
    filterByFacetsParam = filterByFacets.join('&');
    facetParam = facet.join('&');
    customQueryString = [];
    if (staged) {
      customQueryString.push("staged=" + staged);
    }
    if (lang) {
      customQueryString.push("lang=" + lang);
    }
    if (text) {
      customQueryString.push("text=" + text);
    }
    if (filterParam) {
      customQueryString.push("filter=" + filterParam);
    }
    if (filterByQueryParam) {
      customQueryString.push("filter.query=" + filterByQueryParam);
    }
    if (filterByFacetsParam) {
      customQueryString.push("filter.facets=" + filterByFacetsParam);
    }
    if (facetParam) {
      customQueryString.push("facet=" + facetParam);
    }
    return _.compact([ProductProjectionService.__super__._queryString.call(this)].concat(customQueryString)).join('&');
  };


  /**
   * Search product projections with search parameters
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  ProductProjectionService.prototype.search = function() {
    this._currentEndpoint = '/product-projections/search';
    return this.fetch();
  };

  return ProductProjectionService;

})(BaseService);


/**
 * The {@link ProductProjectionService} service.
 */

module.exports = ProductProjectionService;
