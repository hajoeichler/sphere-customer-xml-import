/* ===========================================================
# sphere-node-client - v0.7.2
# ==============================================================
# Copyright (c) 2014 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-client/blob/master/LICENSE-MIT
*/
var _;

_ = require('underscore');

module.exports = {

  /**
   * Build a query string from given parameters
   * @param {Object} opts A JSON object containing query parameters
   * @throws {Error} If perPage is not a number >= 0
   * @throws {Error} If page is not a number >= 1
   * @return {String} The built encoded query string
   */
  buildQueryString: function(opts) {
    var expand, limitParam, offsetParam, page, perPage, queryString, sort, where, whereOperator, whereParam, _ref;
    if (opts == null) {
      opts = {};
    }
    _ref = _.defaults(opts, {
      where: [],
      whereOperator: 'and',
      sort: [],
      expand: []
    }), where = _ref.where, whereOperator = _ref.whereOperator, sort = _ref.sort, page = _ref.page, perPage = _ref.perPage, expand = _ref.expand;
    whereParam = where.join(encodeURIComponent(" " + whereOperator + " "));
    if (_.isNumber(perPage) && perPage < 0) {
      throw new Error('PerPage (limit) must be a number >= 0');
    }
    if (_.isNumber(perPage)) {
      limitParam = perPage;
    }
    if (_.isNumber(page) && page < 1) {
      throw new Error('Page must be a number >= 1');
    }
    offsetParam = (perPage || 100) * (page - 1);
    queryString = [];
    if (whereParam) {
      queryString.push("where=" + whereParam);
    }
    if (_.isNumber(limitParam)) {
      queryString.push("limit=" + limitParam);
    }
    if (offsetParam > 0) {
      queryString.push("offset=" + offsetParam);
    }
    queryString = queryString.concat(_.map(sort, function(s) {
      return "sort=" + s;
    }));
    queryString = queryString.concat(_.map(expand, function(e) {
      return "expand=" + e;
    }));
    return queryString.join('&');
  },

  /**
   * Return the value time in milliseconds based on the given type
   * @param {Number} amount The given amount
   * @param {String} type The type of time unit
   *   s -> seconds
   *   m -> minutes
   *   h -> hours
   *   d -> days
   *   w -> weeks
   * @return {Number} The milliseconds value
   */
  getTime: function(amount, type) {
    switch (type) {
      case 's':
        return amount * 1000;
      case 'm':
        return amount * 1000 * 60;
      case 'h':
        return amount * 1000 * 60 * 60;
      case 'd':
        return amount * 1000 * 60 * 60 * 24;
      case 'w':
        return amount * 1000 * 60 * 60 * 24 * 7;
      default:
        return 0;
    }
  }
};
